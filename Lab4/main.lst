


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Jerry Yang/Aditya Tyagi
    3 00000000         ; Date Created: 2/19/2017
    4 00000000         ; Last Modified: 2/14/2017
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ;   Repeat the functionality from Lab2-3 but now we want
                        you to 
    8 00000000         ;   insert debugging instruments which gather data (stat
                       e and timing)
    9 00000000         ;   to verify that the system is functioning as expected
                       .
   10 00000000         ; Hardware connections (External: One button and one LED
                       )
   11 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
   12 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   13 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   14 00000000         ; Instrumentation data to be gathered is as follows:
   15 00000000         ; After Button(PE1) press collect one state and time ent
                       ry. 
   16 00000000         ; After Buttin(PE1) release, collect 7 state and
   17 00000000         ; time entries on each change in state of the LED(PE0): 
                       
   18 00000000         ; An entry is one 8-bit entry in the Data Buffer and one
                        
   19 00000000         ; 32-bit entry in the Time Buffer
   20 00000000         ;  The Data Buffer entry (byte) content has:
   21 00000000         ;    Lower nibble is state of LED (PE0)
   22 00000000         ;    Higher nibble is state of Button (PE1)
   23 00000000         ;  The Time Buffer entry (32-bit) has:
   24 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   25 00000000         ; Note: The size of both buffers is 50 entries. Once you
                        fill these
   26 00000000         ;       entries you should stop collecting data
   27 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   28 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   29 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   30 00000000         
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R



ARM Macro Assembler    Page 2 


                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   42 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   43 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   44 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B
   45 00000000         
   46 00000000         ; RAM Area
   47 00000000                 AREA             DATA, ALIGN=2
   48 00000000         ;-UUU-Declare  and allocate space for your Buffers 
   49 00000000         ;    and any variables (like pointers and counters) here
                       
   50 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DataBuffer
                               SPACE            50
   51 00000032 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TimeBuffer
                               SPACE            200
   52 000000FA 00 00 00 



ARM Macro Assembler    Page 4 


              00       DataPt  SPACE            4
   53 000000FE 00 00 00 
              00       TimePt  SPACE            4
   54 00000102 00      NDumps  SPACE            1
   55 00000103 00      BlinkingDumps
                               SPACE            1           ; To check when mai
                                                            n loop hits 7 dumps
                                                            
   56 00000104         
   57 00000104         ; ROM Area
   58 00000104                 IMPORT           TExaS_Init
   59 00000104                 IMPORT           SysTick_Init
   60 00000104                 IMPORT           Read_SysTick
   61 00000104         ;-UUU-Import routine(s) from other assembly files (like 
                       SysTick.s) here
   62 00000104                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   63 00000000                 THUMB
   64 00000000                 EXPORT           Start
   65 00000000         
   66 00000000         Start
   67 00000000         ; TExaS_Init sets bus clock at 80 MHz
   68 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   69 00000004 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
   70 00000006         
   71 00000006 48AC            LDR              R0, =SYSCTL_RCGCGPIO_R ; Clock
   72 00000008 6801            LDR              R1, [R0]
   73 0000000A F041 0130       ORR              R1, #0x30
   74 0000000E 6001            STR              R1,[R0]
   75 00000010 BF00            NOP
   76 00000012 BF00            NOP
   77 00000014         ;2 bus cycles
   78 00000014         
   79 00000014 49A9            LDR              R1,=GPIO_PORTF_DIR_R ;Set PF0,P
                                                            F4 as inputs and PF
                                                            1-3 as outputs
   80 00000016 6808            LDR              R0,[R1]
   81 00000018 F000 0004       AND              R0,#0x04
   82 0000001C F040 0004       ORR              R0,#0x04    ; PF2 high for hear
                                                            tbeat CHECK THIS, A
                                                            DD ORR
   83 00000020 6008            STR              R0,[R1]
   84 00000022         
   85 00000022 49A7            LDR              R1,=GPIO_LOCK_KEY 
                                                            ;Unlock Port F
   86 00000024 48A7            LDR              R0,=GPIO_PORTF_LOCK_R
   87 00000026 6001            STR              R1,[R0]
   88 00000028         
   89 00000028 49A7            LDR              R1,=GPIO_PORTF_CR_R ;Allow chan
                                                            ges to PF4
   90 0000002A 6808            LDR              R0,[R1]
   91 0000002C F040 0010       ORR              R0,R0,#0x10
   92 00000030 6008            STR              R0,[R1]
   93 00000032         
   94 00000032 49A6            LDR              R1,=GPIO_PORTF_AFSEL_R ;Clear A
                                                            FSEL bits to 0 to s



ARM Macro Assembler    Page 5 


                                                            elect regular I/O
   95 00000034 6808            LDR              R0,[R1]
   96 00000036 F000 0000       AND              R0,R0,#0x00
   97 0000003A 6008            STR              R0,[R1]
   98 0000003C         
   99 0000003C 49A4            LDR              R1,=GPIO_PORTF_PUR_R ;Enable in
                                                            ternal pull-up on P
                                                            F4
  100 0000003E 6808            LDR              R0,[R1]
  101 00000040 F040 0010       ORR              R0,R0,#0x10
  102 00000044 6008            STR              R0,[R1]
  103 00000046         
  104 00000046 49A3            LDR              R1,=GPIO_PORTF_DEN_R ;Enable da
                                                            ta on PF4 bits
  105 00000048 6808            LDR              R0,[R1]
  106 0000004A F040 0014       ORR              R0,R0,#0x14 ; PF2 for heartbeat
                                                            
  107 0000004E 6008            STR              R0,[R1]
  108 00000050         
  109 00000050         ; set directon
  110 00000050 48A1            LDR              R0, =GPIO_PORTE_DIR_R
  111 00000052 6801            LDR              R1, [R0]
  112 00000054 F041 0101       ORR              R1, #0x01   ;PE0 is the ourput,
                                                             the rest are o and
                                                             input?
  113 00000058 6001            STR              R1, [R0]
  114 0000005A         ;As of right now
  115 0000005A         
  116 0000005A         
  117 0000005A         ; AFSEL
  118 0000005A 48A0            LDR              R0,=GPIO_PORTE_AFSEL_R
  119 0000005C F001 0100       AND              R1, #0
  120 00000060 6001            STR              R1, [R0]    ;check this one //t
                                                            his seems right.
  121 00000062         
  122 00000062         
  123 00000062         ;set DEN
  124 00000062 489F            LDR              R0, =GPIO_PORTE_DEN_R
  125 00000064 6801            LDR              R1, [R0]
  126 00000066 F041 011F       ORR              R1, #0x1F
  127 0000006A 6001            STR              R1, [R0]
  128 0000006C         
  129 0000006C         ;DEFINE/INITIALIZE DEBUG VARS
  130 0000006C         Debug_Init
  131 0000006C 499D            LDR              R1,=NDumps
  132 0000006E F04F 0000       MOV              R0,#0
  133 00000072 7008            STRB             R0,[R1]
  134 00000074         
  135 00000074 499C            LDR              R1,=BlinkingDumps
  136 00000076 F04F 0009       MOV              R0,#9
  137 0000007A 7008            STRB             R0,[R1]
  138 0000007C         
  139 0000007C 499B            LDR              R1,=DataPt  ; Initialize data p
                                                            ointer
  140 0000007E F04F 0002       MOV              R0, #0x2    ; error: cannot MOV
                                                             #0x20000030
  141 00000082 EA4F 7000       LSL              R0, #28
  142 00000086 F100 0030       ADD              R0, #0x30
  143 0000008A 6008            STR              R0,[R1]



ARM Macro Assembler    Page 6 


  144 0000008C         
  145 0000008C 4998            LDR              R1,=TimePt  ; Initialize time p
                                                            ointer
  146 0000008E F04F 0002       MOV              R0, #0x2    ; error: cannot MOV
                                                             #0x20000030 --> me
                                                            ant #0x20000062
  147 00000092 EA4F 7000       LSL              R0, #28
  148 00000096 F100 0062       ADD              R0, #0x62
  149 0000009A 6008            STR              R0,[R1]
  150 0000009C         
  151 0000009C F04F 3CFF       MOV              R12,#0xFFFFFFFF ; Initialize bu
                                                            ffer entries
  152 000000A0 4992            LDR              R1,=DataPt
  153 000000A2 6809            LDR              R1,[R1]
  154 000000A4 F04F 007C       MOV              R0,#124     ; Loop decrementor 
                                                            for do-while loop
  155 000000A8 F8C1 C000 
                       L1      STR              R12,[R1]
  156 000000AC F101 0102       ADD              R1,#2
  157 000000B0 3801            SUBS             R0,#1
  158 000000B2 D1F9            BNE              L1
  159 000000B4         
  160 000000B4 F7FF FFFE       BL               SysTick_Init
  161 000000B8         
  162 000000B8         
  163 000000B8         ;DEFINE BLINK VARS
  164 000000B8 F04F 0400       MOV              R4,#0       ; track state of bu
                                                            tton, 0-unpressed, 
                                                            not 0-pressed
  165 000000BC F04F 058C       MOV              R5,#140     ; length of each cy
                                                            cle
  166 000000C0 F04F 061C       MOV              R6,#28      ; length of duty cy
                                                            cle
  167 000000C4 F04F 071C       MOV              R7,#28      ; incrementor
  168 000000C8 F04F 0801       MOV              R8,#1       ; track cycle, 1 if
                                                             increasing, -1 if 
                                                            decreasing
  169 000000CC F7FF FFFE       BL               Read_SysTick
  170 000000D0         ;DEFINE BREATHE VARS
  171 000000D0 F44F 6985       MOV              R9,#1064    ; length of each cy
                                                            cle
  172 000000D4 F04F 0A1C       MOV              R10,#28     ; duty cycle
  173 000000D8 F04F 0B07       MOV              R11,#7      ; incrementor
  174 000000DC F04F 0C01       MOV              R12,#1      ; track cycle, 1 if
                                                             increasing, -1 if 
                                                            decreasing
  175 000000E0         
  176 000000E0         ;MAIN LOOOOOOOP
  177 000000E0         loop
  178 000000E0 4984            LDR              R1,=GPIO_PORTE_DATA_R 
                                                            ; load PE, PF
  179 000000E2 6808            LDR              R0,[R1]
  180 000000E4 4B84            LDR              R3,=GPIO_PORTF_DATA_R
  181 000000E6 681A            LDR              R2,[R3]
  182 000000E8         
  183 000000E8 F082 0204       EOR              R2, #0x4    ;Won't see toggling
                                                             if breathe on, too
                                                             fast.
  184 000000EC 601A            STR              R2,[R3]



ARM Macro Assembler    Page 7 


  185 000000EE         
  186 000000EE F002 0210       AND              R2,#0x10    ; checks if PF4 but
                                                            ton is pressed
  187 000000F2 2A00            CMP              R2,#0
  188 000000F4 D030            BEQ              BREATHELED_ON
  189 000000F6         
  190 000000F6         ; checks if PE1 button is pressed
  191 000000F6 F000 0002       AND              R0,#0x02
  192 000000FA 2800            CMP              R0,#0
  193 000000FC D162            BNE              SWPRESSED   ; Turns LED off whi
                                                            le pressed, updates
                                                             duty cycle   
  194 000000FE E000            B                BLINKLED_ON
  195 00000100         
  196 00000100 E7EE            B                loop
  197 00000102         
  198 00000102         ;BLINK SUBROUTINE
  199 00000102         BLINKLED_ON
  200 00000102 E92D 5C00       PUSH             {R10-R12,LR}
  201 00000106 F000 F8C3       BL               CHECKBLINKINGDUMPS
  202 0000010A E8BD 5C00       POP              {R10-R12,LR}
  203 0000010E         
  204 0000010E B510            PUSH{R4,LR}
  205 00000110 F040 0001       ORR              R0,R0,#0x1  ; Calculate PE0 & s
                                                            tore
  206 00000114 6008            STR              R0,[R1]
  207 00000116 4634            MOV              R4,R6
  208 00000118 B403            PUSH             {R0,R1}
  209 0000011A F04F 0057       MOV              R0,#87      ; To exhibit change
                                                             in brightness inst
                                                            ead of blinking, us
                                                            e 10.
  210 0000011E FB04 F400       MUL              R4,R0       ; Oscilloscope got 
                                                            between 124 (w/61),
                                                             125 (w/62)
  211 00000122 BC03            POP              {R0,R1}     ; Logic Analyzer go
                                                            t ~>125 (w/87)
  212 00000124 F000 F839       BL               TIMERLOOP   ;
  213 00000128         
  214 00000128         BLINKLED_OFF
  215 00000128 E92D 5C00       PUSH             {R10-R12,LR}
  216 0000012C F000 F8B0       BL               CHECKBLINKINGDUMPS
  217 00000130 E8BD 5C00       POP              {R10-R12,LR}
  218 00000134         
  219 00000134 F080 0001       EOR              R0,#1
  220 00000138 6008            STR              R0,[R1]
  221 0000013A EBA5 0406       SUB              R4,R5,R6
  222 0000013E B403            PUSH             {R0,R1}
  223 00000140 F04F 0057       MOV              R0,#87
  224 00000144 FB04 F400       MUL              R4,R0
  225 00000148 BC03            POP              {R0,R1}
  226 0000014A F000 F826       BL               TIMERLOOP
  227 0000014E E8BD 4010       POP{R4,LR}
  228 00000152 F04F 0400       MOV              R4,#0
  229 00000156 E7C3            B                loop
  230 00000158         
  231 00000158         ; BREATHE SUBROUTINE
  232 00000158         BREATHELED_ON
  233 00000158 B510            PUSH             {R4,LR}



ARM Macro Assembler    Page 8 


  234 0000015A F082 0010       EOR              R0,R2,#0x10 ; Calculate PE0 & s
                                                            tore
  235 0000015E EA4F 1010       LSR              R0,#4
  236 00000162 6008            STR              R0,[R1]
  237 00000164 EA4F 0080       LSL              R0,#2       ; 2 debug instructi
                                                            ons (heartbeat)
  238 00000168 6018            STR              R0,[R3]
  239 0000016A 4654            MOV              R4, R10
  240 0000016C F000 F815       BL               TIMERLOOP   ;
  241 00000170         BREATHELED_OFF
  242 00000170 EA4F 0090       LSR              R0,#2       ; 3 debug instructi
                                                            ons (hearbeat)
  243 00000174 F080 0001       EOR              R0,#1
  244 00000178 6008            STR              R0,[R1]
  245 0000017A EA4F 0080       LSL              R0,#2
  246 0000017E 6018            STR              R0,[R3]
  247 00000180 F000 F84D       BL               CHECKDUTYCYCLE
  248 00000184 F000 F854       BL               UPDATEDUTYCYCLE
  249 00000188 EBA9 040A       SUB              R4,R9,R10
  250 0000018C F000 F805       BL               TIMERLOOP   ;
  251 00000190 E8BD 4038       POP              {R3-R5,LR}
  252 00000194 E8BD 4010       POP              {R4,LR}
  253 00000198 E7A2            B                loop
  254 0000019A         
  255 0000019A         ; OTHER SUBROUTINES
  256 0000019A         TIMERLOOP                            ; delays for (R4)0.
                                                            01 ms, input: R4, n
                                                            o outputs
  257 0000019A 2C00            CMP              R4,#0
  258 0000019C D006            BEQ              next
  259 0000019E F1A4 0401       SUB              R4,#1
  260 000001A2 B570            PUSH             {LR,R4,R5,R6}
  261 000001A4 F000 F805       BL               TIMER
  262 000001A8 E8BD 4070       POP              {LR,R4,R5,R6}
  263 000001AC 2C00    next    CMP              R4,#0
  264 000001AE D1F4            BNE              TIMERLOOP
  265 000001B0 4770            BX               LR
  266 000001B2         
  267 000001B2         
  268 000001B2         TIMER                                ; yields 0.01 ms de
                                                            lay
  269 000001B2 F04F 0510       MOV              R5, #16
  270 000001B6         DLoop
  271 000001B6 F04F 040A       MOV              R4, #10
  272 000001BA         DLoop1
  273 000001BA 3C01            SUBS             R4, #1
  274 000001BC D5FD            BPL              DLoop1
  275 000001BE 3D01            SUBS             R5, #1
  276 000001C0 D5F9            BPL              DLoop
  277 000001C2 4770            BX               LR          ;return
  278 000001C4         
  279 000001C4         
  280 000001C4         SWPRESSED                            ;Turns off LED inde
                                                            finitely
  281 000001C4 F000 0000       AND              R0,#0
  282 000001C8 6008            STR              R0,[R1]
  283 000001CA         
  284 000001CA 2C01            CMP              R4,#1       ;Checks if button i
                                                            s already pressed, 



ARM Macro Assembler    Page 9 


                                                            Y-go to main, N-upd
                                                            ate duty cycle
  285 000001CC D088            BEQ              loop
  286 000001CE         
  287 000001CE         ;PUSH {R0-R4,LR}; Debug dump
  288 000001CE F000 F834       BL               Debug_Capture
  289 000001D2         
  290 000001D2 E92D 1800       PUSH             {R11,R12}   ; Reset BlinkingDum
                                                            ps to 0
  291 000001D6 F8DF C110       LDR              R12,=BlinkingDumps
  292 000001DA F04F 0B00       MOV              R11,#0
  293 000001DE F8CC B000       STR              R11,[R12]
  294 000001E2 E8BD 1800       POP              {R11,R12}
  295 000001E6         
  296 000001E6         ;POP {R0-R4,LR}; End debug dump
  297 000001E6         
  298 000001E6 E92D 5E01       PUSH             {LR,R0,R9-R12} ; Store R9-R12 o
                                                            n stack, move R5-R8
                                                             into R9-R12
  299 000001EA 46A9            MOV              R9,R5
  300 000001EC 46B2            MOV              R10,R6
  301 000001EE 46BB            MOV              R11,R7
  302 000001F0 46C4            MOV              R12,R8
  303 000001F2 F000 F814       BL               CHECKDUTYCYCLE
  304 000001F6 F000 F81B       BL               UPDATEDUTYCYCLE
  305 000001FA E8BD 4038       POP              {R3-R5,LR}
  306 000001FE 464D            MOV              R5,R9
  307 00000200 4656            MOV              R6,R10
  308 00000202 465F            MOV              R7,R11
  309 00000204 46E0            MOV              R8,R12
  310 00000206 E8BD 5E01       POP              {LR,R0,R9-R12} ; Revert origina
                                                            l R9-R12
  311 0000020A         
  312 0000020A F1B8 3FFF       CMP              R8,#-1      ; Resets switch to 
                                                            0
  313 0000020E D103            BNE              pass
  314 00000210 F04F 0801       MOV              R8,#1
  315 00000214 F04F 0600       MOV              R6,#0
  316 00000218         
  317 00000218 F04F 0401 
                       pass    MOV              R4,#1       ; Sets button state
                                                             to 'pressed'
  318 0000021C E760            B                loop
  319 0000021E         
  320 0000021E         CHECKDUTYCYCLE                       ;Checks if duty cyc
                                                            le exceeds min/max 
                                                            values
  321 0000021E 45CA            CMP              R10,R9      ;Check if duty cycl
                                                            e = cycle length
  322 00000220 D101            BNE              notMax
  323 00000222 F04F 3CFF       MOV              R12,#-1
  324 00000226 45DA    notMax  CMP              R10,R11     ;Check if duty cycl
                                                            e = incrementor
  325 00000228 D101            BNE              notMin
  326 0000022A F04F 0C01       MOV              R12, #1
  327 0000022E 4770    notMin  BX               LR
  328 00000230         
  329 00000230         UPDATEDUTYCYCLE                      ; Updates duty cycl
                                                            e



ARM Macro Assembler    Page 10 


  330 00000230 B538            PUSH             {R3-R5,LR}
  331 00000232 FB0C F50B       MUL              R5,R12,R11
  332 00000236 44AA            ADD              R10,R5
  333 00000238 4770            BX               LR
  334 0000023A         
  335 0000023A         Debug_Capture                        ;ADD CALCULATIONS H
                                                            ERE IN COMMENTS: 10
                                                            0*(NUM INSTRUCTIONS
                                                            *2)/TIME FOR ONE 8H
                                                            z CYCLE
  336 0000023A B51F            PUSH             {R0-R4,LR}
  337 0000023C 4B29            LDR              R3,=NDumps  ;Check if buffers f
                                                            ull
  338 0000023E 781A            LDRB             R2,[R3]
  339 00000240 2A32            CMP              R2,#50      ;
  340 00000242 E8BD 401F       POP              {R0-R4,LR}
  341 00000246 D022            BEQ              back
  342 00000248         
  343 00000248         ;Dump port E
  344 00000248 B51F            PUSH             {R0-R4,LR}
  345 0000024A 7808            LDRB             R0,[R1]     ; Read port E
  346 0000024C F000 0203       AND              R2,R0,#0x3  ; Mask for PE1-0
  347 00000250 EA4F 03C2       LSL              R3,R2,#3    ; Shift PE1 to bit 
                                                            4
  348 00000254 441A            ADD              R2,R3
  349 00000256 F002 0211       AND              R2,#0x11    ; Mask for bits to 
                                                            store
  350 0000025A 4C24            LDR              R4,=DataPt  ; Calculate target 
                                                            address
  351 0000025C 6824            LDR              R4,[R4]
  352 0000025E 4821            LDR              R0,=NDumps
  353 00000260 7800            LDRB             R0,[R0]
  354 00000262 4420            ADD              R0,R4
  355 00000264 7002            STRB             R2,[R0]     ; Dump
  356 00000266         
  357 00000266         ;Dump SysTick
  358 00000266 B501            PUSH             {R0,LR}
  359 00000268 F7FF FFFE       BL               Read_SysTick ; Output in R0
  360 0000026C 4C20            LDR              R4,=TimePt  ; Calculate target 
                                                            address
  361 0000026E 6824            LDR              R4,[R4]
  362 00000270 4B1C            LDR              R3,=NDumps
  363 00000272 781B            LDRB             R3,[R3]
  364 00000274 EA4F 0383       LSL              R3,#2
  365 00000278 4423            ADD              R3,R4
  366 0000027A 6018            STR              R0,[R3]     ; Dump
  367 0000027C E8BD 4001       POP              {R0,LR}
  368 00000280         
  369 00000280 4818            LDR              R0,=NDumps
  370 00000282 7801            LDRB             R1,[R0]
  371 00000284 F101 0101       ADD              R1,#1
  372 00000288 7001            STRB             R1,[R0]
  373 0000028A         
  374 0000028A E8BD 401F       POP              {R0-R4,LR}
  375 0000028E 4770    back    BX               LR
  376 00000290         
  377 00000290         CHECKBLINKINGDUMPS                   ; Checks if necessa
                                                            ry to dump
  378 00000290 F8DF C054       LDR              R12,=BlinkingDumps ; Check if e



ARM Macro Assembler    Page 11 


                                                            nough data dumped
  379 00000294 F89C B000       LDRB             R11,[R12]
  380 00000298 F1BB 0F07       CMP              R11,#7
  381 0000029C D208            BCS              skip
  382 0000029E         
  383 0000029E B501            PUSH             {R0,LR}
  384 000002A0 F7FF FFCB       BL               Debug_Capture
  385 000002A4 F10B 0B01       ADD              R11,#1
  386 000002A8 F8CC B000       STR              R11,[R12]
  387 000002AC E8BD 4001       POP              {R0,LR}
  388 000002B0         
  389 000002B0 F8CC B000 
                       skip    STR              R11,[R12]
  390 000002B4 4770            BX               LR
  391 000002B6         
  392 000002B6 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  393 000002B8                 END                          ; end of file
              400FE608 
              40025400 
              4C4F434B 
              40025520 
              40025524 
              40025420 
              40025510 
              4002551C 
              40024400 
              40024420 
              4002451C 
              00000000 
              00000000 
              00000000 
              00000000 
              400243FC 
              400253FC 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BlinkingDumps 00000103

Symbol: BlinkingDumps
   Definitions
      At line 55 in file main.s
   Uses
      At line 135 in file main.s
      At line 291 in file main.s
      At line 378 in file main.s

DATA 00000000

Symbol: DATA
   Definitions
      At line 47 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 00000000

Symbol: DataBuffer
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: DataBuffer unused
DataPt 000000FA

Symbol: DataPt
   Definitions
      At line 52 in file main.s
   Uses
      At line 139 in file main.s
      At line 152 in file main.s
      At line 350 in file main.s

NDumps 00000102

Symbol: NDumps
   Definitions
      At line 54 in file main.s
   Uses
      At line 131 in file main.s
      At line 337 in file main.s
      At line 352 in file main.s
      At line 362 in file main.s
      At line 369 in file main.s

TimeBuffer 00000032

Symbol: TimeBuffer
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: TimeBuffer unused
TimePt 000000FE

Symbol: TimePt



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 53 in file main.s
   Uses
      At line 145 in file main.s
      At line 360 in file main.s

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 62 in file main.s
   Uses
      None
Comment: .text unused
BLINKLED_OFF 00000128

Symbol: BLINKLED_OFF
   Definitions
      At line 214 in file main.s
   Uses
      None
Comment: BLINKLED_OFF unused
BLINKLED_ON 00000102

Symbol: BLINKLED_ON
   Definitions
      At line 199 in file main.s
   Uses
      At line 194 in file main.s
Comment: BLINKLED_ON used once
BREATHELED_OFF 00000170

Symbol: BREATHELED_OFF
   Definitions
      At line 241 in file main.s
   Uses
      None
Comment: BREATHELED_OFF unused
BREATHELED_ON 00000158

Symbol: BREATHELED_ON
   Definitions
      At line 232 in file main.s
   Uses
      At line 188 in file main.s
Comment: BREATHELED_ON used once
CHECKBLINKINGDUMPS 00000290

Symbol: CHECKBLINKINGDUMPS
   Definitions
      At line 377 in file main.s
   Uses
      At line 201 in file main.s
      At line 216 in file main.s

CHECKDUTYCYCLE 0000021E

Symbol: CHECKDUTYCYCLE
   Definitions
      At line 320 in file main.s
   Uses
      At line 247 in file main.s
      At line 303 in file main.s

DLoop 000001B6



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: DLoop
   Definitions
      At line 270 in file main.s
   Uses
      At line 276 in file main.s
Comment: DLoop used once
DLoop1 000001BA

Symbol: DLoop1
   Definitions
      At line 272 in file main.s
   Uses
      At line 274 in file main.s
Comment: DLoop1 used once
Debug_Capture 0000023A

Symbol: Debug_Capture
   Definitions
      At line 335 in file main.s
   Uses
      At line 288 in file main.s
      At line 384 in file main.s

Debug_Init 0000006C

Symbol: Debug_Init
   Definitions
      At line 130 in file main.s
   Uses
      None
Comment: Debug_Init unused
L1 000000A8

Symbol: L1
   Definitions
      At line 155 in file main.s
   Uses
      At line 158 in file main.s
Comment: L1 used once
SWPRESSED 000001C4

Symbol: SWPRESSED
   Definitions
      At line 280 in file main.s
   Uses
      At line 193 in file main.s
Comment: SWPRESSED used once
Start 00000000

Symbol: Start
   Definitions
      At line 66 in file main.s
   Uses
      At line 64 in file main.s
Comment: Start used once
TIMER 000001B2

Symbol: TIMER



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 268 in file main.s
   Uses
      At line 261 in file main.s
Comment: TIMER used once
TIMERLOOP 0000019A

Symbol: TIMERLOOP
   Definitions
      At line 256 in file main.s
   Uses
      At line 212 in file main.s
      At line 226 in file main.s
      At line 240 in file main.s
      At line 250 in file main.s
      At line 264 in file main.s

UPDATEDUTYCYCLE 00000230

Symbol: UPDATEDUTYCYCLE
   Definitions
      At line 329 in file main.s
   Uses
      At line 248 in file main.s
      At line 304 in file main.s

back 0000028E

Symbol: back
   Definitions
      At line 375 in file main.s
   Uses
      At line 341 in file main.s
Comment: back used once
loop 000000E0

Symbol: loop
   Definitions
      At line 177 in file main.s
   Uses
      At line 196 in file main.s
      At line 229 in file main.s
      At line 253 in file main.s
      At line 285 in file main.s
      At line 318 in file main.s

next 000001AC

Symbol: next
   Definitions
      At line 263 in file main.s
   Uses
      At line 258 in file main.s
Comment: next used once
notMax 00000226

Symbol: notMax
   Definitions
      At line 324 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 322 in file main.s
Comment: notMax used once
notMin 0000022E

Symbol: notMin
   Definitions
      At line 327 in file main.s
   Uses
      At line 325 in file main.s
Comment: notMin used once
pass 00000218

Symbol: pass
   Definitions
      At line 317 in file main.s
   Uses
      At line 313 in file main.s
Comment: pass used once
skip 000002B0

Symbol: skip
   Definitions
      At line 389 in file main.s
   Uses
      At line 381 in file main.s
Comment: skip used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 44 in file main.s
   Uses
      At line 85 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 118 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 178 in file main.s
Comment: GPIO_PORTE_DATA_R used once
GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 124 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 110 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 94 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 43 in file main.s
   Uses
      At line 89 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 36 in file main.s
   Uses
      At line 180 in file main.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 104 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 79 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 86 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 99 in file main.s
Comment: GPIO_PORTF_PUR_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 71 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Read_SysTick 00000000

Symbol: Read_SysTick
   Definitions
      At line 60 in file main.s
   Uses
      At line 169 in file main.s
      At line 359 in file main.s

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 59 in file main.s
   Uses
      At line 160 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 58 in file main.s
   Uses
      At line 68 in file main.s
Comment: TExaS_Init used once
3 symbols
380 symbols in table
