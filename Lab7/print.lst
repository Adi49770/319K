


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000 00000000 
                       input   EQU              0
   17 00000000 00000004 
                       divisor EQU              4
   18 00000000 00000008 
                       fixinput
                               EQU              8
   19 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   20 00000000                 THUMB
   21 00000000         
   22 00000000         
   23 00000000         
   24 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   25 00000000         ; Output a 32-bit number in unsigned decimal format
   26 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   27 00000000         ; Output: none
   28 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   29 00000000         
   30 00000000         LCD_OutDec
   31 00000000 E92D 0FF0       PUSH             {R4-R11}    ;for later restorin
                                                            g
   32 00000004 46F3            MOV              R11, LR     ; this was an issue
                                                             so I'm going to us
                                                            e this
   33 00000006 F04F 0100       MOV              R1, #0      ; I don't know why 
                                                            this is here but oh
                                                             well 
   34 0000000A B403            PUSH{R1,R0}                  ; To set the EQU fi
                                                            les (binding)
   35 0000000C         ;PUSH {} ; ro for input
   36 0000000C 9000            STR              R0, [SP, #input] ; store the R0
                                                             value into input
   37 0000000E F04F 0201       MOV              R2, #1
   38 00000012 F04F 0309       MOV              R3, #9
   39 00000016 F04F 010A       MOV              R1, #10     ;all these were to 
                                                            create a loop to st
                                                            ore 1 billion into 



ARM Macro Assembler    Page 2 


                                                            R2
   40 0000001A 2800            CMP              R0, #0      ;check if the passe
                                                            d in value is 0 (wi
                                                            ll save us some tim
                                                            e)
   41 0000001C D017            BEQ              FoundFirstDigit0
   42 0000001E         storeit                              ;store 1 billion in
                                                            to R2 because thats
                                                             the right most div
                                                            isor in a 32 bit re
                                                            gister (nothing can
                                                             be bigger than thi
                                                            s)
   43 0000001E FB02 F201       MUL              R2, R1      ;10^9
   44 00000022 F1A3 0301       SUB              R3, #1
   45 00000026 2B00            CMP              R3, #0
   46 00000028 D1F9            BNE              storeit
   47 0000002A 9201            STR              R2, [SP, #divisor] ;end loop to
                                                             store 1 billion, s
                                                            tore it into diviso
                                                            r
   48 0000002C         FindFirstDigit
   49 0000002C 9A01            LDR              R2, [SP, #divisor] 
                                                            ; load the divisor 
                                                            
   50 0000002E FBB0 F3F2       UDIV             R3, R0, R2  ; divide Ro by the 
                                                            divisor 
   51 00000032 2B00            CMP              R3, #0      ; if it is 0, then 
                                                            it means go to the 
                                                            next lower bit 
   52 00000034 D000            BEQ              NotFound    ; if the answer is 
                                                            0, go to the next b
                                                            it
   53 00000036 E005            B                FoundFirstDigit ; first number 
                                                            found
   54 00000038         NotFound
   55 00000038 F04F 040A       MOV              R4, #10
   56 0000003C FBB2 F2F4       UDIV             R2, R4      ; divide the diviso
                                                            r by 10 to take out
                                                             a 0
   57 00000040 9201            STR              R2, [SP, #divisor] ; store back
                                                             the new divisor in
                                                            to the binded value
                                                            
   58 00000042 E7F3            B                FindFirstDigit ;loop back up 
   59 00000044         FoundFirstDigit                      ;found the first di
                                                            git
   60 00000044 4618            MOV              R0, R3      ; AAPCS
   61 00000046 F100 0030       ADD              R0, #0x30   ;to get the correct
                                                             hex value to be pr
                                                            inted
   62 0000004A 4699            MOV              R9, R3      ; R9 was not modifi
                                                            ed by the pushes an
                                                            d the pops, this wa
                                                            s added later to av
                                                            oid stupid errors
   63 0000004C E006            B                LOOP        ;go to LOOP
   64 0000004E         FoundFirstDigit0                     ;the number was 0
   65 0000004E F04F 0000       MOV              R0, #0



ARM Macro Assembler    Page 3 


   66 00000052 F100 0030       ADD              R0, #0x30
   67 00000056 F7FF FFFE       BL               ST7735_OutChar ;print out 0 on 
                                                            screen
   68 0000005A E01A            B                DONE
   69 0000005C         ;BL ST7735_OutChar
   70 0000005C         LOOP
   71 0000005C E92D 0801       PUSH{R0,R11}                 ; to again store th
                                                            em in order to avoi
                                                            d issues
   72 00000060 F7FF FFFE       BL               ST7735_OutChar ; print out the 
                                                            current value in R0
                                                            
   73 00000064 E8BD 0801       POP              {R0,R11}    ;restore the regist
                                                            ers (this fucks up 
                                                            R3 [not restoring p
                                                            roperly])
   74 00000068 464B            MOV              R3, R9      ; used this to corr
                                                            ectly resotre R3
   75 0000006A 9A01            LDR              R2, [SP, #divisor] ;load the va
                                                            lue of divisor
   76 0000006C 9800            LDR              R0, [SP, #input] ; load the val
                                                            ue of input
   77 0000006E FB02 F503       MUL              R5, R2, R3  ; multiply the digi
                                                            t that was just pri
                                                            nted times the divi
                                                            sor 
   78 00000072 EBA0 0005       SUB              R0, R0, R5  ; subtract that val
                                                            ue from the input
   79 00000076 9000            STR              R0,  [SP, #input] ; store the n
                                                            ew value of input i
                                                            n the binded memory
                                                             location
   80 00000078 F04F 060A       MOV              R6, #10
   81 0000007C FBB2 F2F6       UDIV             R2,R2, R6   ; take out one more
                                                             0 from the divisor
                                                            
   82 00000080 2A00            CMP              R2, #0      ;make sure the divi
                                                            sor is still valid 
                                                            
   83 00000082 D006            BEQ              DONE        ; only happens when
                                                             all the digits are
                                                             printed off
   84 00000084 FBB0 F0F2       UDIV             R0, R0, R2  ; divide the new in
                                                            put by the divisor 
                                                            to get the value to
                                                             be printed
   85 00000088 9201            STR              R2,  [SP, #divisor] ;store the 
                                                            new value of diviso
                                                            r into the binded l
                                                            ocation
   86 0000008A 4681            MOV              R9, R0      ; this is to make s
                                                            ure no values are m
                                                            odified for R3 (rig
                                                            ht after the POP on
                                                             line 72)
   87 0000008C F100 0030       ADD              R0, #0x30   ; get the accurate 
                                                            value to print out
   88 00000090         ;BL ST7735_OutChar
   89 00000090 E7E4            B                LOOP        ; loop back up



ARM Macro Assembler    Page 4 


   90 00000092         
   91 00000092         DONE
   92 00000092 46DE            MOV              LR, R11     ;restore LR (this w
                                                            as fucking up becau
                                                            se BL ST7735_OutCha
                                                            r was modifying the
                                                             LR)
   93 00000094 BC03            POP              {R0,R1}     ; this is to reset 
                                                            the SP back to wher
                                                            e it was
   94 00000096         ;POP {R1}
   95 00000096 E8BD 0FF0       POP              {R4-R11}    ; restore the origi
                                                            nal values thanks t
                                                            o AAPCS
   96 0000009A         
   97 0000009A 4770            BX               LR          ; end subroutine 
   98 0000009C         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   99 0000009C         
  100 0000009C         ; -----------------------LCD _OutFix--------------------
                       --
  101 0000009C         ; Output characters to LCD display in fixed-point format
                       
  102 0000009C         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
  103 0000009C         ; Inputs:  R0 is an unsigned 32-bit number
  104 0000009C         ; Outputs: none
  105 0000009C         ; E.g., R0=0,    then output "0.000 "
  106 0000009C         ;       R0=3,    then output "0.003 "
  107 0000009C         ;       R0=89,   then output "0.089 "
  108 0000009C         ;       R0=123,  then output "0.123 "
  109 0000009C         ;       R0=9999, then output "9.999 "
  110 0000009C         ;       R0>9999, then output "*.*** "
  111 0000009C         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  112 0000009C         LCD_OutFix
  113 0000009C E92D 0FF0       PUSH             {R4-R11}    ; to restore later
  114 000000A0 46F3            MOV              R11, LR     ; to make sure othe
                                                            r BL don't screw wi
                                                            th this
  115 000000A2 F04F 0100       MOV              R1, #0      ; why not
  116 000000A6 B403            PUSH             {R1, R0}    ; to use the bindin
                                                            g
  117 000000A8 9002            STR              R0, [SP, #fixinput] ; store the
                                                             input into the bin
                                                            ded location
  118 000000AA 2800            CMP              R0, #0
  119 000000AC D012            BEQ              ZeroDecimal ; if the input is 0
                                                            
  120 000000AE         
  121 000000AE F04F 030A       MOV              R3, #10
  122 000000B2 FBB0 F2F3       UDIV             R2, R0, R3  ; see if its one di
                                                            git
  123 000000B6 2A00            CMP              R2, #0
  124 000000B8 D01F            BEQ              OneDigit
  125 000000BA F04F 0364       MOV              R3, #100
  126 000000BE FBB0 F2F3       UDIV             R2, R0, R3  ;see if its two dig
                                                            its 
  127 000000C2 2A00            CMP              R2, #0
  128 000000C4 D02F            BEQ              TwoDigit



ARM Macro Assembler    Page 5 


  129 000000C6 F44F 737A       MOV              R3, #1000
  130 000000CA FBB0 F2F3       UDIV             R2, R0, R3  ;see if its three d
                                                            igits
  131 000000CE 2A00            CMP              R2, #0
  132 000000D0 D03B            BEQ              ThreeDigit
  133 000000D2 E048            B                FourDigit
  134 000000D4         ZeroDecimal
  135 000000D4 F04F 0503       MOV              R5, #3
  136 000000D8 F04F 0000       MOV              R0, #0
  137 000000DC F7FF FFFE       BL               LCD_OutDec
  138 000000E0 F04F 002E       MOV              R0, #0x2E   ; this is decimal p
                                                            oint in hex
  139 000000E4 F7FF FFFE       BL               ST7735_OutChar
  140 000000E8         zeroloop
  141 000000E8 F04F 0000       MOV              R0, #0
  142 000000EC F7FF FFFE       BL               LCD_OutDec
  143 000000F0 F1A5 0501       SUB              R5, #1
  144 000000F4 2D00            CMP              R5, #0
  145 000000F6 D1F7            BNE              zeroloop    ; 3 zeroes 
  146 000000F8         
  147 000000F8         
  148 000000F8 E066            B                Done
  149 000000FA         
  150 000000FA         OneDigit
  151 000000FA         ;PUSH{R0-R11}
  152 000000FA 9802            LDR              R0, [SP,#fixinput]
  153 000000FC         
  154 000000FC 4607            MOV              R7, R0      ; have the decimal 
                                                            ready
  155 000000FE F04F 0000       MOV              R0, #0
  156 00000102 F7FF FFFE       BL               LCD_OutDec
  157 00000106 F04F 002E       MOV              R0, #0x2E   ; decimal point
  158 0000010A F7FF FFFE       BL               ST7735_OutChar
  159 0000010E F04F 0000       MOV              R0, #0
  160 00000112 F7FF FFFE       BL               LCD_OutDec
  161 00000116 F04F 0000       MOV              R0, #0
  162 0000011A F7FF FFFE       BL               LCD_OutDec
  163 0000011E 4638            MOV              R0, R7      ;restore the decima
                                                            l value
  164 00000120 F7FF FFFE       BL               LCD_OutDec
  165 00000124         ; POP{R0-R11}
  166 00000124 E050            B                Done
  167 00000126         
  168 00000126         TwoDigit
  169 00000126 9802            LDR              R0, [SP,#fixinput]
  170 00000128 4607            MOV              R7, R0      ;have the number re
                                                            ady
  171 0000012A F04F 0000       MOV              R0, #0
  172 0000012E F7FF FFFE       BL               LCD_OutDec
  173 00000132 F04F 002E       MOV              R0, #0x2E   ; decimal point
  174 00000136 F7FF FFFE       BL               ST7735_OutChar
  175 0000013A F04F 0000       MOV              R0, #0
  176 0000013E F7FF FFFE       BL               LCD_OutDec
  177 00000142 4638            MOV              R0, R7      ;restore the number
                                                             
  178 00000144 F7FF FFFE       BL               LCD_OutDec
  179 00000148 E03E            B                Done
  180 0000014A         
  181 0000014A         ThreeDigit



ARM Macro Assembler    Page 6 


  182 0000014A 9802            LDR              R0, [SP,#fixinput]
  183 0000014C 4607            MOV              R7, R0      ;have the number re
                                                            ady
  184 0000014E F04F 0000       MOV              R0, #0
  185 00000152 F7FF FFFE       BL               LCD_OutDec
  186 00000156 F04F 002E       MOV              R0, #0x2E   ; decimal point
  187 0000015A F7FF FFFE       BL               ST7735_OutChar
  188 0000015E 4638            MOV              R0, R7      ; restore number
  189 00000160 F7FF FFFE       BL               LCD_OutDec
  190 00000164 E030            B                Done
  191 00000166         
  192 00000166         FourDigit
  193 00000166 9802            LDR              R0, [SP,#fixinput]
  194 00000168 F242 3228       MOV              R2, #9000
  195 0000016C F502 727A       ADD              R2, #1000
  196 00000170 4290            CMP              R0, R2
  197 00000172 D214            BCS              Stars       ;if it's greater or
                                                             equal to 10000
  198 00000174 F44F 727A       MOV              R2, #1000
  199 00000178 FBB0 F7F2       UDIV             R7, R0, R2  ; get the first dig
                                                            it
  200 0000017C 4638            MOV              R0, R7
  201 0000017E F7FF FFFE       BL               LCD_OutDec  ; print out the fis
                                                            t digit
  202 00000182 F04F 002E       MOV              R0, #0x2E   ; decimal point
  203 00000186 F7FF FFFE       BL               ST7735_OutChar
  204 0000018A 9802            LDR              R0, [SP, #fixinput]
  205 0000018C F44F 717A       MOV              R1, #1000
  206 00000190 FB07 F701       MUL              R7, R1      ; the first digit t
                                                            imes 1000
  207 00000194 EBA0 0007       SUB              R0, R7      ; R0 -= R7 to get t
                                                            he last three digit
                                                            s
  208 00000198 F7FF FFFE       BL               LCD_OutDec  ; print out the las
                                                            t 3 digits
  209 0000019C E014            B                Done
  210 0000019E         
  211 0000019E         
  212 0000019E         Stars
  213 0000019E F04F 002A       MOV              R0, #0x2A   ; stars
  214 000001A2 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;print the star out
                                                            
  215 000001A6 F04F 002E       MOV              R0, #0x2E   ; decimal point
  216 000001AA F7FF FFFE       BL               ST7735_OutChar
  217 000001AE F04F 002A       MOV              R0, #0x2A   ; stars
  218 000001B2 F7FF FFFE       BL               ST7735_OutChar
  219 000001B6 F04F 002A       MOV              R0, #0x2A   ; stars
  220 000001BA F7FF FFFE       BL               ST7735_OutChar
  221 000001BE F04F 002A       MOV              R0, #0x2A   ; stars
  222 000001C2 F7FF FFFE       BL               ST7735_OutChar
  223 000001C6 E7FF            B                Done
  224 000001C8         
  225 000001C8         
  226 000001C8         
  227 000001C8         
  228 000001C8         
  229 000001C8         Done
  230 000001C8 F04F 0000       MOV              R0, #0



ARM Macro Assembler    Page 7 


  231 000001CC         ;STR R0, [SP, #fixinput]
  232 000001CC BC03            POP              {R1, R0}    ; to restore SP
  233 000001CE 46DE            MOV              LR, R11     ; restore LR
  234 000001D0 E8BD 0FF0       POP              {R4- R11}   ; AAPCS
  235 000001D4 4770            BX               LR          ; end subroutine 
  236 000001D6         
  237 000001D6 00 00           ALIGN
  238 000001D8         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  239 000001D8         
  240 000001D8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  241 000001D8                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --list
=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 19 in file Print.s
   Uses
      None
Comment: .text unused
DONE 00000092

Symbol: DONE
   Definitions
      At line 91 in file Print.s
   Uses
      At line 68 in file Print.s
      At line 83 in file Print.s

Done 000001C8

Symbol: Done
   Definitions
      At line 229 in file Print.s
   Uses
      At line 148 in file Print.s
      At line 166 in file Print.s
      At line 179 in file Print.s
      At line 190 in file Print.s
      At line 209 in file Print.s
      At line 223 in file Print.s

FindFirstDigit 0000002C

Symbol: FindFirstDigit
   Definitions
      At line 48 in file Print.s
   Uses
      At line 58 in file Print.s
Comment: FindFirstDigit used once
FoundFirstDigit 00000044

Symbol: FoundFirstDigit
   Definitions
      At line 59 in file Print.s
   Uses
      At line 53 in file Print.s
Comment: FoundFirstDigit used once
FoundFirstDigit0 0000004E

Symbol: FoundFirstDigit0
   Definitions
      At line 64 in file Print.s
   Uses
      At line 41 in file Print.s
Comment: FoundFirstDigit0 used once
FourDigit 00000166

Symbol: FourDigit
   Definitions
      At line 192 in file Print.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 133 in file Print.s
Comment: FourDigit used once
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 30 in file Print.s
   Uses
      At line 14 in file Print.s
      At line 137 in file Print.s
      At line 142 in file Print.s
      At line 156 in file Print.s
      At line 160 in file Print.s
      At line 162 in file Print.s
      At line 164 in file Print.s
      At line 172 in file Print.s
      At line 176 in file Print.s
      At line 178 in file Print.s
      At line 185 in file Print.s
      At line 189 in file Print.s
      At line 201 in file Print.s
      At line 208 in file Print.s

LCD_OutFix 0000009C

Symbol: LCD_OutFix
   Definitions
      At line 112 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
LOOP 0000005C

Symbol: LOOP
   Definitions
      At line 70 in file Print.s
   Uses
      At line 63 in file Print.s
      At line 89 in file Print.s

NotFound 00000038

Symbol: NotFound
   Definitions
      At line 54 in file Print.s
   Uses
      At line 52 in file Print.s
Comment: NotFound used once
OneDigit 000000FA

Symbol: OneDigit
   Definitions
      At line 150 in file Print.s
   Uses
      At line 124 in file Print.s
Comment: OneDigit used once
Stars 0000019E




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: Stars
   Definitions
      At line 212 in file Print.s
   Uses
      At line 197 in file Print.s
Comment: Stars used once
ThreeDigit 0000014A

Symbol: ThreeDigit
   Definitions
      At line 181 in file Print.s
   Uses
      At line 132 in file Print.s
Comment: ThreeDigit used once
TwoDigit 00000126

Symbol: TwoDigit
   Definitions
      At line 168 in file Print.s
   Uses
      At line 128 in file Print.s
Comment: TwoDigit used once
ZeroDecimal 000000D4

Symbol: ZeroDecimal
   Definitions
      At line 134 in file Print.s
   Uses
      At line 119 in file Print.s
Comment: ZeroDecimal used once
storeit 0000001E

Symbol: storeit
   Definitions
      At line 42 in file Print.s
   Uses
      At line 46 in file Print.s
Comment: storeit used once
zeroloop 000000E8

Symbol: zeroloop
   Definitions
      At line 140 in file Print.s
   Uses
      At line 145 in file Print.s
Comment: zeroloop used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

divisor 00000004

Symbol: divisor
   Definitions
      At line 17 in file Print.s
   Uses
      At line 47 in file Print.s
      At line 49 in file Print.s
      At line 57 in file Print.s
      At line 75 in file Print.s
      At line 85 in file Print.s

fixinput 00000008

Symbol: fixinput
   Definitions
      At line 18 in file Print.s
   Uses
      At line 117 in file Print.s
      At line 152 in file Print.s
      At line 169 in file Print.s
      At line 182 in file Print.s
      At line 193 in file Print.s
      At line 204 in file Print.s

input 00000000

Symbol: input
   Definitions
      At line 16 in file Print.s
   Uses
      At line 36 in file Print.s
      At line 76 in file Print.s
      At line 79 in file Print.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 67 in file Print.s
      At line 72 in file Print.s
      At line 139 in file Print.s
      At line 158 in file Print.s
      At line 174 in file Print.s
      At line 187 in file Print.s
      At line 203 in file Print.s
      At line 214 in file Print.s
      At line 216 in file Print.s
      At line 218 in file Print.s
      At line 220 in file Print.s
      At line 222 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
355 symbols in table
